{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["synthesisVoices","speechSynthesis","getVoices","App","props","tabId","location","pathname","substring","state","voicesLoaded","loadVoices","bind","onvoiceschanged","this","wakeLock","requestWakeLock","a","navigator","request","addEventListener","console","log","error","name","message","handleVisibilityChange","document","visibilityState","setState","history","className","animate","id","large","onChange","push","selectedTabId","to","component","workout","path","exact","About","Component","Workout","interval","undefined","item","timer","timePerExercise","timeBetweenExercises","countdown","window","setInterval","clearInterval","match","currentWorkoutItem","workoutItems","content","indexOf","fill","intent","icon","onClick","timeInSeconds","pad","num","size","slice","time","parseFloat","toFixed","minutes","Math","floor","seconds","secondsToTime","alt","src","announce","exercises","newTimer","parseInt","href","target","rel","Loading","text","cancel","utterance","SpeechSynthesisUtterance","Object","assign","voice","voiceURI","volume","rate","pitch","lang","speak","A","B","withRouter","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.80278b6d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link, Redirect, Route, Switch } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport { FaPlay, FaPause } from 'react-icons/fa';\nimport { Button, Tab, TabId, Tabs } from '@blueprintjs/core';\n\nvar synthesisVoices = speechSynthesis.getVoices();\n\nclass App extends Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let tabId = 'Workout';\n        switch(props.location.pathname.substring(1)) {\n            case 'Workout':\n            case 'A':\n            case 'B':\n                tabId = 'Workout';\n                break;\n\n            case 'About':\n                tabId = 'About';\n                break;\n        }\n\n        this.state ={\n            voicesLoaded: false,\n            tabId: tabId,\n        };\n\n        this.loadVoices = this.loadVoices.bind(this);\n    }\n\n    componentDidMount()\n    {\n        speechSynthesis.onvoiceschanged = this.loadVoices;\n\n        let wakeLock = null;\n\n        const requestWakeLock = async () => {\n          try {\n            wakeLock = await navigator.wakeLock.request('screen');\n            wakeLock.addEventListener('release', () => {\n              console.log('Screen Wake Lock was released');\n            });\n            console.log('Screen Wake Lock is active');\n          } catch (err) {\n            console.error(`${err.name}, ${err.message}`);\n          }\n        };\n\n        requestWakeLock();\n\n        const handleVisibilityChange = () => {\n          if (wakeLock !== null && document.visibilityState === 'visible') {\n            requestWakeLock();\n          }\n        };\n\n        document.addEventListener('visibilitychange', handleVisibilityChange);\n        document.addEventListener('fullscreenchange', handleVisibilityChange);\n    }\n\n    loadVoices()\n    {\n        synthesisVoices = speechSynthesis.getVoices();\n        this.setState({voicesLoaded: true});\n    }\n\n    render()\n    {\n        const { voicesLoaded } = this.state;\n        const { history } = this.props;\n\n        return (\n            <div className=\"App\">\n                <Tabs className=\"border-bottom\"\n                    animate={true}\n                    id=\"navigation\"\n                    large={true}\n                    onChange={(tabId: TabId) => {\n                        this.setState({tabId}, () => {\n                            history.push('/' + tabId);\n                        });\n                    }}\n                    selectedTabId={this.state.tabId}>\n                    <Tab id=\"Workout\">\n                        <Link to=\"/\">Workout</Link>\n                    </Tab>\n                    <Tab id=\"About\">\n                        <Link to=\"/About\">About</Link>\n                    </Tab>\n                </Tabs>\n\n                <div className=\"viewport\">\n                    {\n                        voicesLoaded === false ?\n                            <Loading /> :\n                            (\n                                <Switch>\n                                    <Route component={ (props) => { return <Workout {...props} workout={null} /> } } path=\"/\"  exact />\n                                    <Route component={ (props) => { return <Workout {...props} workout={'A'} /> } } path=\"/a\" exact />\n                                    <Route component={ (props) => { return <Workout {...props} workout={'B'} /> } } path=\"/b\" exact />\n                                    <Route component={ About  } path=\"/About\" exact />\n\n                                    <Redirect to=\"/\" />\n                                </Switch>\n                            )\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Workout extends Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.state = {\n            interval: undefined,\n            item: 0,\n            state: 'not-started',\n            timer: timePerExercise + timeBetweenExercises,\n        };\n\n        this.countdown = this.countdown.bind(this);\n    }\n\n    componentDidMount()\n    {\n        if (this.props.workout) {\n            this.setState({interval: window.setInterval(() => {\n                this.countdown();\n            }, 1000)});\n        }\n    }\n\n    componentWillUnmount()\n    {\n        window.clearInterval(this.state.interval);\n    }\n\n    render()\n    {\n        const { history, match, workout } = this.props;\n        const { item, state, timer } = this.state;\n\n        if (workout) {\n            const currentWorkoutItem = workoutItems[workout][item];\n\n            let content = null;\n\n            if (['not-started', 'paused'].indexOf(state) !== -1) {\n                content = (\n                    <Button fill={true}\n                        large={true}\n                        intent={'primary'}\n                        icon={'play'}\n                        onClick={() => this.setState({state: 'started'})}>\n                        { state === 'not-started' ? 'Get Started' : 'Resume' }\n                    </Button>\n                );\n            } else if (state === 'started') {\n                content = (\n                    <>\n                        <Button fill={true}\n                            large={true}\n                            intent={'danger'}\n                            icon=\"pause\"\n                            className=\"flex-grow-1\"\n                            onClick={() => this.setState({state: 'paused'})}>\n                            Pause\n                        </Button>\n\n                        <div className=\"flex-grow-1\">\n                            { secondsToTime(timer) }\n                        </div>\n\n                        <h2 className=\"flex-grow-2\">\n                            { currentWorkoutItem }\n                        </h2>\n\n                        <div className=\"flex-grow-8\">\n                            <img alt=\"Workout\" src={ `./images/${workout}-${item + 1}.png` } />\n                        </div>\n                    </>\n                );\n            } else if (state === 'done') {\n                announce('All done. Good workout mother flipper!');\n\n                content = (\n                    <>\n                        Done!\n                    </>\n                );\n            }\n\n            return (\n                <div className=\"Workout\">\n                    <header>\n                        Workout {workout}\n                    </header>\n\n                    { content }\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"Workout\">\n                <Button fill={true}\n                    large={true}\n                    intent={'warning'}\n                    className=\"vertical-fill\"\n                    onClick={() => history.push('/A')}>\n                    Workout A\n                </Button>\n                <Button fill={true}\n                    large={true}\n                    intent={'danger'}\n                    className=\"vertical-fill\"\n                    onClick={() => history.push('/B')}>\n                    Workout B\n                </Button>\n            </div>\n        );\n    }\n\n    countdown()\n    {\n        const { interval, item, state, timer } = this.state;\n        const { workout } = this.props;\n        const exercises = workoutItems[workout];\n\n        const newTimer = parseInt(timer - 1, 10);\nconsole.log(state, timer, newTimer, timePerExercise);\n\n        if (['done', 'not-started', 'paused'].indexOf(state) !== -1) {\n            return;\n        }\n\n\n        if (newTimer > timePerExercise) {\n            this.setState({timer: newTimer});\n\n            return;\n        }\n\n        if (newTimer === timePerExercise) {\n            announce(exercises[item] + '. Go');\n        }\n        if (newTimer > 0) {\n            this.setState({timer: newTimer}, () => {\n                if (Math.floor(timePerExercise / 2) === newTimer) {\n                    announce(Math.floor(timePerExercise / 2) + ' seconds left.');\n                } else if (newTimer <= 10) {\n                    announce(newTimer);\n                }\n            })\n        } else if (newTimer === 0) {\n            if (typeof exercises[item + 1] !== 'undefined') {\n                this.setState({item: parseInt(item + 1, 10), timer: timePerExercise + timeBetweenExercises}, () => {\n                    if (timeBetweenExercises > 3) {\n                        announce(timeBetweenExercises + ' second break, then ' + exercises[item + 1]);\n                    }\n                })\n                return;\n            }\n\n            this.setState({state: 'done'});\n            window.clearInterval(interval);\n        }\n    }\n}\n\nclass About extends Component\n{\n    render()\n    {\n        return (\n            <>\n                Small PWA to make using the Athlean X \"Perfect Home Workout\" easier to use\n                <p>\n                    <a href=\"https://youtu.be/vgTbM_COQZM\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        https://youtu.be/vgTbM_COQZM\n                    </a>\n                </p>\n            </>\n        );\n    }\n}\n\nclass Loading extends Component\n{\n    render()\n    {\n        return (\n            <h1>Loading</h1>\n        );\n    }\n}\n\nfunction announce(text)\n{\n    speechSynthesis.cancel();\n\n    let utterance = new SpeechSynthesisUtterance();\n    let message = Object.assign(\n        utterance,\n        {\n            voice: synthesisVoices[3],\n            voiceURI: 'native',\n            volume: 1,\n            rate: 1.1,\n            pitch: 1,\n            text: text,\n            lang: 'en-US',\n        }\n    );\n\n    speechSynthesis.speak(message);\n}\n\nfunction secondsToTime(timeInSeconds) {\n    var pad = function(num, size) { return ('000' + num).slice(size * -1); },\n        time = parseFloat(timeInSeconds).toFixed(3),\n        hours = Math.floor(time / 60 / 60),\n        minutes = Math.floor(time / 60) % 60,\n        seconds = Math.floor(time - minutes * 60),\n        milliseconds = time.slice(-3);\n\n    return pad(minutes, 2) + ':' + pad(seconds, 2);\n}\n\nconst workoutItems = {\n    A: [\n        'Single leg box squats',\n        'One and a half bottomed out squats',\n        'Jump squats',\n        'Handstand, or power push-ups',\n        'Rotational push-ups',\n        'Cobra push-ups',\n        'Heel touch squats',\n        'Sprinter lunge',\n        'Plyo sprinter lunge',\n        'Pull-ups or seated pull-ups',\n        'Human pullover or sliding pulldown',\n        'Inverted chin curls',\n        'Reverse corkscrew',\n        'Black widow knee slides',\n        'Levitating crunches',\n        'Corrective exercise: angels and devils',\n    ],\n    B: [\n        'Single leg box squats',\n        'One and a half bottomed out squats',\n        'Jump squats',\n        'Handstand, or power push-ups',\n    ],\n};\nconst timePerExercise = 60;\nconst timeBetweenExercises = 5;\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}